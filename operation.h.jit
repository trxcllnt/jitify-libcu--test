const char* const operation_h = "operation.h\n"
"#pragma once\n"
"#include \"traits.h\"\n"
"\n"
"struct Add {\n"
"    template <typename TypeOut, typename TypeLhs, typename TypeRhs>\n"
"    static TypeOut operate(TypeLhs x, TypeRhs y) {\n"
"        return (static_cast<TypeOut>(x) + static_cast<TypeOut>(y));\n"
"    }\n"
"};\n"
"\n"
"using RAdd = Add;\n"
"\n"
"struct Sub {\n"
"    template <typename TypeOut, typename TypeLhs, typename TypeRhs>\n"
"    static TypeOut operate(TypeLhs x, TypeRhs y) {\n"
"        return (static_cast<TypeOut>(x) - static_cast<TypeOut>(y));\n"
"    }\n"
"};\n"
"\n"
"struct RSub {\n"
"    template <typename TypeOut, typename TypeLhs, typename TypeRhs>\n"
"    static TypeOut operate(TypeLhs x, TypeRhs y) {\n"
"        return (static_cast<TypeOut>(y) - static_cast<TypeOut>(x));\n"
"    }\n"
"};\n"
"\n"
"struct Mul {\n"
"    template <typename TypeOut, typename TypeLhs, typename TypeRhs>\n"
"    static TypeOut operate(TypeLhs x, TypeRhs y) {\n"
"        return (static_cast<TypeOut>(x) * static_cast<TypeOut>(y));\n"
"    }\n"
"};\n"
"\n"
"using RMul = Mul;\n"
"\n"
"struct Div {\n"
"    template <typename TypeOut, typename TypeLhs, typename TypeRhs>\n"
"    static TypeOut operate(TypeLhs x, TypeRhs y) {\n"
"        return (static_cast<TypeOut>(x) / static_cast<TypeOut>(y));\n"
"    }\n"
"};\n"
"\n"
"struct RDiv {\n"
"    template <typename TypeOut, typename TypeLhs, typename TypeRhs>\n"
"    static TypeOut operate(TypeLhs x, TypeRhs y) {\n"
"        return (static_cast<TypeOut>(y) / static_cast<TypeOut>(x));\n"
"    }\n"
"};\n"
"\n"
"struct TrueDiv {\n"
"    template <typename TypeOut, typename TypeLhs, typename TypeRhs>\n"
"    static TypeOut operate(TypeLhs x, TypeRhs y) {\n"
"        return (static_cast<double>(x) / static_cast<double>(y));\n"
"    }\n"
"};\n"
"\n"
"struct RTrueDiv {\n"
"    template <typename TypeOut, typename TypeLhs, typename TypeRhs>\n"
"    static TypeOut operate(TypeLhs x, TypeRhs y) {\n"
"        return (static_cast<double>(y) / static_cast<double>(x));\n"
"    }\n"
"};\n"
"\n"
"struct FloorDiv {\n"
"    template <typename TypeOut, typename TypeLhs, typename TypeRhs>\n"
"    static TypeOut operate(TypeLhs x, TypeRhs y) {\n"
"        return floor(static_cast<double>(x) / static_cast<double>(y));\n"
"    }\n"
"};\n"
"\n"
"struct RFloorDiv {\n"
"    template <typename TypeOut, typename TypeLhs, typename TypeRhs>\n"
"    static TypeOut operate(TypeLhs x, TypeRhs y) {\n"
"        return floor(static_cast<double>(y) / static_cast<double>(x));\n"
"    }\n"
"};\n"
"\n"
"struct Mod {\n"
"    template <typename TypeOut,\n"
"              typename TypeLhs,\n"
"              typename TypeRhs,\n"
"              enable_if_t<(is_integral_v<TypeOut>)>* = nullptr>\n"
"    static TypeOut operate(TypeLhs x, TypeRhs y) {\n"
"        return (static_cast<TypeOut>(x) % static_cast<TypeOut>(y));\n"
"    }\n"
"\n"
"    template <typename TypeOut,\n"
"              typename TypeLhs,\n"
"              typename TypeRhs,\n"
"              enable_if_t<(isFloat<TypeOut>)>* = nullptr>\n"
"    static TypeOut operate(TypeLhs x, TypeRhs y) {\n"
"        return fmodf(static_cast<TypeOut>(x), static_cast<TypeOut>(y));\n"
"    }\n"
"\n"
"    template <typename TypeOut,\n"
"              typename TypeLhs,\n"
"              typename TypeRhs,\n"
"              enable_if_t<(isDouble<TypeOut>)>* = nullptr>\n"
"    static TypeOut operate(TypeLhs x, TypeRhs y) {\n"
"        return fmod(static_cast<TypeOut>(x), static_cast<TypeOut>(y));\n"
"    }\n"
"};\n"
"\n"
"struct RMod {\n"
"    template <typename TypeOut,\n"
"              typename TypeLhs,\n"
"              typename TypeRhs,\n"
"              enable_if_t<(is_integral_v<TypeOut>)>* = nullptr>\n"
"    static TypeOut operate(TypeLhs x, TypeRhs y) {\n"
"        return (static_cast<TypeOut>(y) % static_cast<TypeOut>(x));\n"
"    }\n"
"\n"
"    template <typename TypeOut,\n"
"              typename TypeLhs,\n"
"              typename TypeRhs,\n"
"              enable_if_t<(isFloat<TypeOut>)>* = nullptr>\n"
"    static TypeOut operate(TypeLhs x, TypeRhs y) {\n"
"        return fmodf(static_cast<TypeOut>(y), static_cast<TypeOut>(x));\n"
"    }\n"
"\n"
"    template <typename TypeOut,\n"
"              typename TypeLhs,\n"
"              typename TypeRhs,\n"
"              enable_if_t<(isDouble<TypeOut>)>* = nullptr>\n"
"    static TypeOut operate(TypeLhs x, TypeRhs y) {\n"
"        return fmod(static_cast<TypeOut>(y), static_cast<TypeOut>(x));\n"
"    }\n"
"};\n"
"\n"
"struct PyMod {\n"
"    template <typename TypeOut,\n"
"              typename TypeLhs,\n"
"              typename TypeRhs,\n"
"              enable_if_t<(is_integral_v<TypeOut>)>* = nullptr>\n"
"    static TypeOut operate(TypeLhs x, TypeRhs y) {\n"
"        return ((x % y) + y) % y;\n"
"    }\n"
"\n"
"    template <typename TypeOut,\n"
"              typename TypeLhs,\n"
"              typename TypeRhs,\n"
"              enable_if_t<(is_floating_point_v<TypeOut>)>* = nullptr>\n"
"    static TypeOut operate(TypeLhs x, TypeRhs y) {\n"
"        double x1 = static_cast<double>(x);\n"
"        double y1 = static_cast<double>(y);\n"
"        return fmod(fmod(x1, y1) + y1, y1);\n"
"    }\n"
"};\n"
"\n"
"struct RPyMod {\n"
"    template <typename TypeOut,\n"
"              typename TypeLhs,\n"
"              typename TypeRhs,\n"
"              enable_if_t<(is_integral_v<TypeOut>)>* = nullptr>\n"
"    static TypeOut operate(TypeLhs x, TypeRhs y) {\n"
"        return ((y % x) + x) % x;\n"
"    }\n"
"\n"
"    template <typename TypeOut,\n"
"              typename TypeLhs,\n"
"              typename TypeRhs,\n"
"              enable_if_t<(is_floating_point_v<TypeOut>)>* = nullptr>\n"
"    static TypeOut operate(TypeLhs x, TypeRhs y) {\n"
"        double x1 = static_cast<double>(x);\n"
"        double y1 = static_cast<double>(y);\n"
"        return fmod(fmod(y1, x1) + x1, x1);\n"
"    }\n"
"};\n"
"\n"
"struct Pow {\n"
"    template <typename TypeOut, typename TypeLhs, typename TypeRhs>\n"
"    static TypeOut operate(TypeLhs x, TypeRhs y) {\n"
"        return pow(static_cast<double>(x), static_cast<double>(y));\n"
"    }\n"
"};\n"
"\n"
"struct RPow {\n"
"    template <typename TypeOut, typename TypeLhs, typename TypeRhs>\n"
"    static TypeOut operate(TypeLhs x, TypeRhs y) {\n"
"        return pow(static_cast<double>(y), static_cast<double>(x));\n"
"    }\n"
"};\n"
"\n"
"struct Equal {\n"
"    template <typename TypeOut, typename TypeLhs, typename TypeRhs>\n"
"    static TypeOut operate(TypeLhs x, TypeRhs y) {\n"
"        return (x == y);\n"
"    }\n"
"};\n"
"\n"
"using REqual = Equal;\n"
"\n"
"struct NotEqual {\n"
"    template <typename TypeOut, typename TypeLhs, typename TypeRhs>\n"
"    static TypeOut operate(TypeLhs x, TypeRhs y) {\n"
"        return (x != y);\n"
"    }\n"
"};\n"
"\n"
"using RNotEqual = NotEqual;\n"
"\n"
"struct Less {\n"
"    template <typename TypeOut, typename TypeLhs, typename TypeRhs>\n"
"    static TypeOut operate(TypeLhs x, TypeRhs y) {\n"
"        return (x < y);\n"
"    }\n"
"};\n"
"\n"
"struct RLess {\n"
"    template <typename TypeOut, typename TypeLhs, typename TypeRhs>\n"
"    static TypeOut operate(TypeLhs x, TypeRhs y) {\n"
"        return (y < x);\n"
"    }\n"
"};\n"
"\n"
"struct Greater {\n"
"    template <typename TypeOut, typename TypeLhs, typename TypeRhs>\n"
"    static TypeOut operate(TypeLhs x, TypeRhs y) {\n"
"        return (x > y);\n"
"    }\n"
"};\n"
"\n"
"struct RGreater {\n"
"    template <typename TypeOut, typename TypeLhs, typename TypeRhs>\n"
"    static TypeOut operate(TypeLhs x, TypeRhs y) {\n"
"        return (y > x);\n"
"    }\n"
"};\n"
"\n"
"struct LessEqual {\n"
"    template <typename TypeOut, typename TypeLhs, typename TypeRhs>\n"
"    static TypeOut operate(TypeLhs x, TypeRhs y) {\n"
"        return (x <= y);\n"
"    }\n"
"};\n"
"\n"
"struct RLessEqual {\n"
"    template <typename TypeOut, typename TypeLhs, typename TypeRhs>\n"
"    static TypeOut operate(TypeLhs x, TypeRhs y) {\n"
"        return (y <= x);\n"
"    }\n"
"};\n"
"\n"
"struct GreaterEqual {\n"
"    template <typename TypeOut, typename TypeLhs, typename TypeRhs>\n"
"    static TypeOut operate(TypeLhs x, TypeRhs y) {\n"
"        return (x >= y);\n"
"    }\n"
"};\n"
"\n"
"struct RGreaterEqual {\n"
"    template <typename TypeOut, typename TypeLhs, typename TypeRhs>\n"
"    static TypeOut operate(TypeLhs x, TypeRhs y) {\n"
"        return (y >= x);\n"
"    }\n"
"};\n"
"\n"
"struct BitwiseAnd {\n"
"    template <typename TypeOut, typename TypeLhs, typename TypeRhs>\n"
"    static TypeOut operate(TypeLhs x, TypeRhs y) {\n"
"        return (static_cast<TypeOut>(x) & static_cast<TypeOut>(y));\n"
"    }\n"
"};\n"
"\n"
"using RBitwiseAnd = BitwiseAnd;\n"
"\n"
"struct BitwiseOr {\n"
"    template <typename TypeOut, typename TypeLhs, typename TypeRhs>\n"
"    static TypeOut operate(TypeLhs x, TypeRhs y) {\n"
"        return (static_cast<TypeOut>(x) | static_cast<TypeOut>(y));\n"
"    }\n"
"};\n"
"\n"
"using RBitwiseOr = BitwiseOr;\n"
"\n"
"struct BitwiseXor {\n"
"    template <typename TypeOut, typename TypeLhs, typename TypeRhs>\n"
"    static TypeOut operate(TypeLhs x, TypeRhs y) {\n"
"        return (static_cast<TypeOut>(x) ^ static_cast<TypeOut>(y));\n"
"    }\n"
"};\n"
"\n"
"using RBitwiseXor = BitwiseXor;\n"
"\n"
"struct LogicalAnd {\n"
"    template <typename TypeOut, typename TypeLhs, typename TypeRhs>\n"
"    static TypeOut operate(TypeLhs x, TypeRhs y) {\n"
"        return (x && y);\n"
"    }\n"
"};\n"
"\n"
"using RLogicalAnd = LogicalAnd;\n"
"\n"
"struct LogicalOr {\n"
"    template <typename TypeOut, typename TypeLhs, typename TypeRhs>\n"
"    static TypeOut operate(TypeLhs x, TypeRhs y) {\n"
"        return (x || y);\n"
"    }\n"
"};\n"
"\n"
"using RLogicalOr = LogicalOr;\n"
"\n"
"struct UserDefinedOp {\n"
"    template <typename TypeOut, typename TypeLhs, typename TypeRhs>\n"
"    static TypeOut operate(TypeLhs x, TypeRhs y) {\n"
"        TypeOut output;\n"
"        GENERIC_BINARY_OP(&output, x, y);\n"
"        return output;\n"
"    }\n"
"};\n"
"\n"
;
