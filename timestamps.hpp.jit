const char* const cudf_wrappers_timestamps_hpp = "cudf/wrappers/timestamps.hpp\n"
"/*\n"
" * Copyright (c) 2019, NVIDIA CORPORATION.\n"
" *\n"
" * Licensed under the Apache License, Version 2.0 (the \"License\");\n"
" * you may not use this file except in compliance with the License.\n"
" * You may obtain a copy of the License at\n"
" *\n"
" *     http://www.apache.org/licenses/LICENSE-2.0\n"
" *\n"
" * Unless required by applicable law or agreed to in writing, software\n"
" * distributed under the License is distributed on an \"AS IS\" BASIS,\n"
" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"
" * See the License for the specific language governing permissions and\n"
" * limitations under the License.\n"
" */\n"
"\n"
"#pragma once\n"
"\n"
"#include <limits>\n"
"#define _LIBCUDACXX_USE_CXX20_CHRONO\n"
"#define _LIBCUDACXX_USE_CXX17_TYPE_TRAITS\n"
"#include <simt/chrono>\n"
"\n"
"/**---------------------------------------------------------------------------*\n"
" * @file timestamps.hpp\n"
" * @brief Concrete type definitions for int32_t and int64_t timestamps in\n"
" * varying resolutions as durations since the UNIX epoch.\n"
" *---------------------------------------------------------------------------**/\n"
"namespace cudf {\n"
"\n"
"namespace detail {\n"
"\n"
"// TODO: Use chrono::utc_clock when available in libcu++?\n"
"template <class Duration>\n"
"using time_point =\n"
"    simt::std::chrono::time_point<simt::std::chrono::system_clock, Duration>;\n"
"\n"
"template <class Duration>\n"
"struct timestamp : time_point<Duration> {\n"
"  constexpr timestamp() : time_point<Duration>(Duration()){};\n"
"  constexpr timestamp(Duration d) : time_point<Duration>(d){};\n"
"  constexpr timestamp(typename Duration::rep r)\n"
"      : time_point<Duration>(Duration(r)){};\n"
"\n"
"  /**\n"
"   * @brief Constructs a new timestamp by copying the contents of another\n"
"   * `time_point` and converting its duration value if necessary.\n"
"   *\n"
"   * @param other The `timestamp` to copy\n"
"   */\n"
"  template <class FromDuration>\n"
"  inline constexpr explicit timestamp(time_point<FromDuration> const& other)\n"
"      : time_point<Duration>(simt::std::chrono::duration_cast<Duration>(\n"
"            other.time_since_epoch())){};\n"
"};\n"
"}  // namespace detail\n"
"\n"
"/**---------------------------------------------------------------------------*\n"
" * @brief Type alias representing an int32_t duration of days since the unix\n"
" * epoch.\n"
" *---------------------------------------------------------------------------**/\n"
"using timestamp_D = detail::timestamp<\n"
"    simt::std::chrono::duration<int32_t, simt::std::ratio<86400>>>;\n"
"/**---------------------------------------------------------------------------*\n"
" * @brief Type alias representing an int64_t duration of seconds since the\n"
" * unix epoch.\n"
" *---------------------------------------------------------------------------**/\n"
"using timestamp_s = detail::timestamp<\n"
"    simt::std::chrono::duration<int64_t, simt::std::ratio<1>>>;\n"
"/**---------------------------------------------------------------------------*\n"
" * @brief Type alias representing an int64_t duration of milliseconds since\n"
" * the unix epoch.\n"
" *---------------------------------------------------------------------------**/\n"
"using timestamp_ms =\n"
"    detail::timestamp<simt::std::chrono::duration<int64_t, simt::std::milli>>;\n"
"/**---------------------------------------------------------------------------*\n"
" * @brief Type alias representing an int64_t duration of microseconds since\n"
" * the unix epoch.\n"
" *---------------------------------------------------------------------------**/\n"
"using timestamp_us =\n"
"    detail::timestamp<simt::std::chrono::duration<int64_t, simt::std::micro>>;\n"
"/**---------------------------------------------------------------------------*\n"
" * @brief Type alias representing an int64_t duration of nanoseconds since\n"
" * the unix epoch.\n"
" *---------------------------------------------------------------------------**/\n"
"using timestamp_ns =\n"
"    detail::timestamp<simt::std::chrono::duration<int64_t, simt::std::nano>>;\n"
"\n"
"static_assert(sizeof(timestamp_D) == sizeof(typename timestamp_D::rep), \"\");\n"
"static_assert(sizeof(timestamp_s) == sizeof(typename timestamp_s::rep), \"\");\n"
"static_assert(sizeof(timestamp_ms) == sizeof(typename timestamp_ms::rep), \"\");\n"
"static_assert(sizeof(timestamp_us) == sizeof(typename timestamp_us::rep), \"\");\n"
"static_assert(sizeof(timestamp_ns) == sizeof(typename timestamp_ns::rep), \"\");\n"
"\n"
"}  // namespace cudf\n"
"\n"
"namespace std {\n"
"/**---------------------------------------------------------------------------*\n"
" * @brief Specialization of std::numeric_limits for cudf::detail::timestamp\n"
" *\n"
" * Pass through to return the limits of the underlying numeric representation.\n"
" *--------------------------------------------------------------------------**/\n"
"#define TIMESTAMP_LIMITS(TypeName)                                  \\\n"
"  template <>                                                       \\\n"
"  struct numeric_limits<TypeName> {                                 \\\n"
"    static constexpr TypeName max() noexcept {                      \\\n"
"      return std::numeric_limits<typename TypeName::rep>::max();    \\\n"
"    }                                                               \\\n"
"    static constexpr TypeName lowest() noexcept {                   \\\n"
"      return std::numeric_limits<typename TypeName::rep>::lowest(); \\\n"
"    }                                                               \\\n"
"    static constexpr TypeName min() noexcept {                      \\\n"
"      return std::numeric_limits<typename TypeName::rep>::min();    \\\n"
"    }                                                               \\\n"
"  }\n"
"\n"
"TIMESTAMP_LIMITS(cudf::timestamp_D);\n"
"TIMESTAMP_LIMITS(cudf::timestamp_s);\n"
"TIMESTAMP_LIMITS(cudf::timestamp_ms);\n"
"TIMESTAMP_LIMITS(cudf::timestamp_us);\n"
"TIMESTAMP_LIMITS(cudf::timestamp_ns);\n"
"\n"
"#undef TIMESTAMP_LIMITS\n"
"\n"
"}  // namespace std\n"
;
